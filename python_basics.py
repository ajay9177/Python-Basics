# -*- coding: utf-8 -*-
"""Python_Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_vDUxIIw9GLNdhpb1x5TTd_eTRT5yti
"""

# Python Intro
# Strings
# Lists,Tuples and Dictionaries
# Conditionals
# Loops
# Exception Handling
# Files
# Imports
# Functions
# Classes

#Python Intro - String
# String usage in Python
my_string = "this is a string"
my_name = "karan"
print(my_name)

#String concat(Syntax: [start : stop] â†’ includes start, excludes stop.)
second_string = "this is another " + "string"
print(second_string)

#String slicing
print(my_string[1:6])

#String substitution
my_string = "I like %s and %s" % ("Security","Coding")
print(my_string)

#Substitution using templates(dictionary)
print("%(lang)s is fun"%{"lang":"python"})

#Substitution using format function
print("Python is a {0},{1}".format("simple", "language"))

# Python Intro - List, Tuples, Dicts
# Lists can be created in two ways, Lists are mutable
my_list = []
my_list2 = list()

alpha_list = [34,23,67,100,88,2]
print(alpha_list)

# Returns None as the alpha_list will be sorted in place instead of being assigned to sorted_list. The sort
# function does not return any value

sorted_list = alpha_list.sort()
print(sorted_list)
print(alpha_list)

# Tuples - Immutable list
my_tuple = (1,2,3,4,5)
print(my_tuple[0:3])

abc_list = list(my_tuple)
print(abc_list)

#Dict - hash table with key:value pairs
my_dict = {}
another_dict = dict()
other_dict = {"one":1,"two":2,"three":3}
print(other_dict)

# Print keys in dict
print(other_dict.keys())

#Check if a key exists in the dict
print("two" in other_dict)

#Print value of a key
print(other_dict["three"])

# Python Intro - Empty Checks on Lists, Tuple and Strings
#Empty and None check on strings
empty_list = []
empty_tuple = ()
empty_string = ""
nothing = None
if empty_list == []:
  print("It's an empty list!")
if empty_tuple:
  print("It's not an empty tuple!")
if not empty_string:
  print("This is an empty string!")
if not nothing:
 print("Then it's nothing!")

# Python Intro - Conditionals
# Python cares about spaces, don't mix tabs and spaces, especially in if conditions
var1 = 1
var2 = 2
if var1 < var2:
  print("var 1 is less than var 2")
val3 = int(input("input var3:"))
if val3 < var2:
  print("var 3 is less than var 2")
# Conditional operators are and, or, not
if var1 == 1 and var2 == 2:
  print("var1 is 1 and var2 is 2")
if var1 > 2:
  print("var1 > 2")
elif var1 < 2:
  print("var1 < 2")
else:
  print("var1 == var2")

# Python Intro - Loops
# for and while loops
# range function creates a list that is n in length
print(range(0,5))
for number in range(5):
 print(number)
if __name__ == "__main__":
  print("within main")
# write main code here
for key in other_dict.keys():
 print(key)
while val3 > 0:
 print(key)
 val3 = val3 - 1

# Python Intro - Exception Handling
try:
    1/0                          # This will raise a ZeroDivisionError
except ZeroDivisionError:
    print("cannot divide by zero")   # Handling division by zero error

my_dict = {"a": 1, "b": 2, "c": 3}   # Sample dictionary

try:
    value = my_dict["a"]             # Accessing a valid key, no error
except IndexError:
    print("This index does not exist!")   # Handles index errors
except KeyError:
    print("This key is not in the dictionary!")  # Handles invalid dictionary keys
except:
    print("Some other error occurred!")   # Handles any other unexpected error
else:
    print("No error occurred")            # Executes if no exception occurred
finally:
    print("The finally statement has executed")  # Always executes

# Python Intro - Files

# File Handling
# Default mode for file open is read only
handle = open("test.txt", "r")
# read() reads the entire file
data = handle.read()
print(data)
handle.close()

# readline() will read line by line and readlines() will read all lines.
# Use with keyword to open files. Creates a context manager to automatically close the file when processing is done.
try:
    with open("test.txt") as file_handler:
        for line in file_handler:       # Iterates line by line
            print(line)
except IOError:
    print("An IOError occurred")

# Python Intro - Imports
# Python comes with lots of pre-made code baked in.
# These pieces of code are known as modules and packages.
# A module is a single importable Python file whereas a package is made up of two or more modules.
# A package can be imported the same way a module is.

import math
print(math.sqrt(4))   # 2.0

from math import sqrt
print(sqrt(16))       # 4.0

# Python Intro - Functions

def func():
    print("Inside func")          # Simple function

def add(a, b):
    return a + b                  # Adds two numbers

print(add(1, 2))                  # Output: 3

# For any number of args or keywords, use *args and **kwargs
def many(*args, **kwargs):
    # args turns into a tuple
    print(args)
    # kwargs turns into a dict
    print(kwargs)

many(1, 2, 3, name="Mike", job="programmer")
# Output:
# (1, 2, 3)
# {'name': 'Mike', 'job': 'programmer'}

# Python Intro - Classes

# Class definition
class Vehicle(object):
    def __init__(self, color, doors):
        self.color = color        # Instance variable for color
        self.doors = doors        # Instance variable for doors

    def brake(self):
        return "Braking"

    def drive(self):
        return "Driving"

# Python Intro - (Sub) Classes

# Subclass definition from Vehicle
class Vehiclesub(Vehicle):
    def brake(self):
        return "this message is from a subclass"

if __name__ == "__main__":
    print("within main")
    # write main code here
    car = Vehiclesub("blue color", "black door")
    print(car.brake())